//
// DO NOT EDIT THIS FILE, IT HAS BEEN GENERATED USING AndroidAnnotations.
//


package com.megadevs.nostradamus.nostratooth.service;

import android.content.Context;
import android.content.Intent;
import android.location.LocationManager;
import android.net.ConnectivityManager;
import android.util.Log;
import com.googlecode.androidannotations.api.BackgroundExecutor;
import com.megadevs.nostradamus.nostratooth.msg.Message;

public final class Service_
    extends Service
{


    private void init_() {
        locationManager = ((LocationManager) this.getSystemService(Context.LOCATION_SERVICE));
        connManager = ((ConnectivityManager) this.getSystemService(Context.CONNECTIVITY_SERVICE));
    }

    @Override
    public void onCreate() {
        init_();
        super.onCreate();
    }

    public static Service_.IntentBuilder_ intent(Context context) {
        return new Service_.IntentBuilder_(context);
    }

    @Override
    public void send(final Message msg) {
        BackgroundExecutor.execute(new Runnable() {


            @Override
            public void run() {
                try {
                    Service_.super.send(msg);
                } catch (RuntimeException e) {
                    Log.e("Service_", "A runtime exception was thrown while executing code in a runnable", e);
                }
            }

        }
        );
    }

    @Override
    public void listen() {
        BackgroundExecutor.execute(new Runnable() {


            @Override
            public void run() {
                try {
                    Service_.super.listen();
                } catch (RuntimeException e) {
                    Log.e("Service_", "A runtime exception was thrown while executing code in a runnable", e);
                }
            }

        }
        );
    }

    @Override
    public void autoDiscover() {
        BackgroundExecutor.execute(new Runnable() {


            @Override
            public void run() {
                try {
                    Service_.super.autoDiscover();
                } catch (RuntimeException e) {
                    Log.e("Service_", "A runtime exception was thrown while executing code in a runnable", e);
                }
            }

        }
        );
    }

    @Override
    public void sendMessageOnline(final Message msg) {
        BackgroundExecutor.execute(new Runnable() {


            @Override
            public void run() {
                try {
                    Service_.super.sendMessageOnline(msg);
                } catch (RuntimeException e) {
                    Log.e("Service_", "A runtime exception was thrown while executing code in a runnable", e);
                }
            }

        }
        );
    }

    public static class IntentBuilder_ {

        private Context context_;
        private final Intent intent_;

        public IntentBuilder_(Context context) {
            context_ = context;
            intent_ = new Intent(context, Service_.class);
        }

        public Intent get() {
            return intent_;
        }

        public Service_.IntentBuilder_ flags(int flags) {
            intent_.setFlags(flags);
            return this;
        }

        public void start() {
            context_.startService(intent_);
        }

    }

}
